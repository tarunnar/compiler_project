
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\x9d\xe0\x0f\x10\xbd^\xea\n\x8e\xdc\x9bL 8\x9d\xa5'
    
_lr_action_items = {'END_BLOCK':([27,28,31,33,34,36,37,38,39,40,43,45,47,48,49,51,54,55,65,72,76,79,80,85,100,103,104,107,108,110,114,126,136,141,143,152,153,156,157,158,159,163,169,170,176,177,178,179,180,182,183,184,185,186,190,191,192,193,194,195,196,197,201,202,204,205,206,207,208,],[-52,-58,-27,-25,-26,64,-24,-55,-11,-56,-50,-54,-53,-9,-51,-57,77,78,-12,-10,101,102,103,-28,152,-79,153,156,157,159,163,-37,-29,-47,170,-59,-62,-61,-60,-23,-80,-83,-46,-77,-18,-13,-15,-14,-17,196,197,-82,-81,-84,201,-22,-20,-19,-21,-16,-64,-63,-78,205,207,-65,208,-66,-67,]),'MUT':([50,],[73,]),'OPEN_PARANTHESIS':([8,9,10,32,44,46,],[11,12,13,62,68,70,]),'LESS_EQUAL_OP':([90,],[116,]),'CLOSE_PARANTHESIS':([11,12,13,14,16,19,26,70,86,95,166,188,],[15,17,18,-48,22,25,-49,94,109,142,189,199,]),'UNSAFE':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[29,29,29,-52,-58,-27,-25,-26,-24,-55,29,-56,-50,-54,-53,29,-51,-57,29,29,29,29,29,29,29,-28,29,-79,-37,-29,-47,-59,-62,29,29,-61,-60,-23,-80,-83,-46,-77,29,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,29,29,-78,29,-65,-66,-67,]),'MULTIPLICATION':([91,93,168,],[-30,138,-31,]),'GREATER_THAN':([90,],[121,]),'WHILE':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[30,30,30,-52,-58,-27,-25,-26,-24,-55,30,-56,-50,-54,-53,30,-51,-57,30,30,30,30,30,30,30,-28,30,-79,-37,-29,-47,-59,-62,30,30,-61,-60,-23,-80,-83,-46,-77,30,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,30,30,-78,30,-65,-66,-67,]),'COLON':([113,],[162,]),'NOTEQUAL':([90,],[117,]),'PRINT':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,87,96,103,126,136,141,152,153,154,155,156,157,158,159,160,161,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[32,32,32,-52,-58,-27,-25,-26,-24,-55,32,-56,-50,-54,-53,32,-51,-57,32,32,32,32,32,32,32,-28,32,32,-79,-37,-29,-47,-59,-62,32,32,-61,-60,-23,-80,32,32,-83,-46,-77,32,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,32,32,-78,32,-65,-66,-67,]),'NOT_OP':([91,92,167,],[-38,131,-39,]),'LESS_THAN':([90,],[123,]),'TRUE':([30,99,145,],[60,150,175,]),'MINUS':([91,93,99,168,],[-30,140,151,-31,]),'FN':([0,2,64,78,101,102,],[5,7,-6,-8,-5,-7,]),'XOR_OP':([91,92,167,],[-38,133,-39,]),'SEMICOLON':([61,91,92,93,94,109,142,146,147,148,149,150,167,168,172,173,174,175,181,],[85,-30,126,136,141,158,169,176,177,178,179,180,-39,-31,191,192,193,194,195,]),'OR_OP':([90,],[119,]),'PLUS':([91,93,168,],[-30,137,-31,]),'COMMA':([14,],[20,]),'RIGHT_SHIFT':([91,92,167,],[-38,127,-39,]),'ASSIGNMENT_OP':([46,74,98,],[69,99,145,]),'OR_LOGICAL':([91,92,167,],[-38,132,-39,]),'$end':([1,3,4,6,77,],[-1,0,-3,-2,-4,]),'DIVISION':([91,93,168,],[-30,135,-31,]),'mat':([31,33,34,37,85,111,112,126,136,141,158,169,176,177,178,179,180,191,192,193,194,195,],[-27,-25,-26,-24,-28,160,161,-37,-29,-47,-23,-46,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,]),'FOR':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[42,42,42,-52,-58,-27,-25,-26,-24,-55,42,-56,-50,-54,-53,42,-51,-57,42,42,42,42,42,42,42,-28,42,-79,-37,-29,-47,-59,-62,42,42,-61,-60,-23,-80,-83,-46,-77,42,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,42,42,-78,42,-65,-66,-67,]),'SENTENCE':([62,99,],[86,147,]),'LEFT_SHIFT':([91,92,167,],[-38,128,-39,]),'ELSE':([47,97,207,208,],[71,144,-66,-67,]),'AND_OP':([90,],[120,]),'IN':([67,],[89,]),'LESSEQUAL':([90,],[125,]),'MAIN_FUN':([5,7,],[9,9,]),'LIT_INTEGER':([82,87,89,99,116,117,118,119,120,121,122,123,124,125,145,151,164,],[106,111,115,149,-70,-74,-68,-75,-76,-72,166,-71,-69,-73,174,181,187,]),'MODULUS':([91,93,168,],[-30,139,-31,]),'MATCH':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[35,35,35,-52,-58,-27,-25,-26,-24,-55,35,-56,-50,-54,-53,35,-51,-57,35,35,35,35,35,35,35,-28,35,-79,-37,-29,-47,-59,-62,35,35,-61,-60,-23,-80,-83,-46,-77,35,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,35,35,-78,35,-65,-66,-67,]),'IF':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,71,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[44,44,44,-52,-58,-27,-25,-26,-24,-55,44,-56,-50,-54,-53,44,-51,-57,44,44,44,44,44,44,44,44,-28,44,-79,-37,-29,-47,-59,-62,44,44,-61,-60,-23,-80,-83,-46,-77,44,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,44,44,-78,44,-65,-66,-67,]),'BEGIN_BLOCK':([15,17,18,22,25,29,52,58,59,60,63,66,71,105,106,144,187,189,199,],[21,23,24,53,56,57,75,81,83,84,87,88,96,154,155,171,198,200,203,]),'ident':([5,7,11,13,20,21,23,24,27,28,30,31,32,33,34,35,37,38,39,40,41,42,43,45,47,48,49,50,51,53,56,57,68,69,70,73,75,81,83,84,85,87,88,96,103,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,152,153,154,155,156,157,158,159,160,161,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[8,10,14,14,14,46,46,46,-52,-58,58,-27,61,-25,-26,63,-24,-55,46,-56,66,67,-50,-54,-53,46,-51,74,-57,46,46,46,90,91,14,98,46,46,46,46,-28,46,113,46,-79,-37,-45,-44,167,-40,-43,-41,-42,168,-35,-29,-32,-34,-36,-33,-47,-59,-62,46,46,-61,-60,-23,-80,46,46,-83,-46,-77,46,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,46,46,-78,46,-65,-66,-67,]),'FALSE':([30,99,145,],[59,146,172,]),'STRUCT':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[41,41,41,-52,-58,-27,-25,-26,-24,-55,41,-56,-50,-54,-53,41,-51,-57,41,41,41,41,41,41,41,-28,41,-79,-37,-29,-47,-59,-62,41,41,-61,-60,-23,-80,-83,-46,-77,41,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,41,41,-78,41,-65,-66,-67,]),'LIT_FLOAT':([82,99,145,165,],[105,148,173,188,]),'LET':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,87,96,103,126,136,141,152,153,154,155,156,157,158,159,160,161,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[50,50,50,-52,-58,-27,-25,-26,-24,-55,50,-56,-50,-54,-53,50,-51,-57,50,50,50,50,50,50,50,-28,50,50,-79,-37,-29,-47,-59,-62,50,50,-61,-60,-23,-80,50,50,-83,-46,-77,50,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,50,50,-78,50,-65,-66,-67,]),'i32':([162,],[186,]),'EQUALS_COMP':([58,90,116,117,118,119,120,121,122,123,124,125,],[82,118,-70,-74,-68,-75,-76,-72,165,-71,-69,-73,]),'D_DOT':([115,],[164,]),'GREATER_EQUAL_OP':([90,],[124,]),'AND_LOGICAL':([91,92,167,],[-38,130,-39,]),'LOOP':([21,23,24,27,28,31,33,34,37,38,39,40,43,45,47,48,49,51,53,56,57,75,81,83,84,85,96,103,126,136,141,152,153,154,155,156,157,158,159,163,169,170,171,176,177,178,179,180,191,192,193,194,195,196,197,198,200,201,203,205,207,208,],[52,52,52,-52,-58,-27,-25,-26,-24,-55,52,-56,-50,-54,-53,52,-51,-57,52,52,52,52,52,52,52,-28,52,-79,-37,-29,-47,-59,-62,52,52,-61,-60,-23,-80,-83,-46,-77,52,-18,-13,-15,-14,-17,-22,-20,-19,-21,-16,-64,-63,52,52,-78,52,-65,-66,-67,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'struct_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'for_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'ProgramFile':([0,],[1,]),'unsafe_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'match_stmt':([87,],[110,]),'block_stmt':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'operator':([90,],[122,]),'bitop':([21,23,24,39,48,53,56,57,75,81,83,84,87,96,154,155,160,161,171,198,200,203,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'fn_call':([21,23,24,39,48,53,56,57,75,81,83,84,87,96,154,155,160,161,171,198,200,203,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'b_expr':([69,],[92,]),'stmts':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[36,54,55,65,72,76,79,80,100,104,107,108,143,182,183,190,202,204,206,]),'else_if_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'match_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'arguments':([11,13,20,70,],[16,19,26,95,]),'arith_op':([93,],[134,]),'binop':([21,23,24,39,48,53,56,57,75,81,83,84,87,96,154,155,160,161,171,198,200,203,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'compilation_unit':([0,],[3,]),'bit_op':([92,],[129,]),'struct_stmt':([88,],[114,]),'loop_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'if_else_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'expr':([69,],[93,]),'if_block':([21,23,24,39,48,53,56,57,71,75,81,83,84,96,154,155,171,198,200,203,],[47,47,47,47,47,47,47,47,97,47,47,47,47,47,47,47,47,47,47,47,]),'fun_def':([0,],[2,]),'non_block_stmt':([21,23,24,39,48,53,56,57,75,81,83,84,87,96,154,155,160,161,171,198,200,203,],[48,48,48,48,48,48,48,48,48,48,48,48,112,48,48,48,184,185,48,48,48,48,]),'while_block':([21,23,24,39,48,53,56,57,75,81,83,84,96,154,155,171,198,200,203,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'main_fun':([0,2,],[4,6,]),'print_ident':([21,23,24,39,48,53,56,57,75,81,83,84,87,96,154,155,160,161,171,198,200,203,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> compilation_unit","S'",1,None,None,None),
  ('compilation_unit -> ProgramFile','compilation_unit',1,'p_compilation_unit','irgen.py',39),
  ('ProgramFile -> fun_def main_fun','ProgramFile',2,'p_ProgramFile','irgen.py',43),
  ('ProgramFile -> main_fun','ProgramFile',1,'p_ProgramFile','irgen.py',44),
  ('main_fun -> FN MAIN_FUN OPEN_PARANTHESIS CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','main_fun',7,'p_main_fun','irgen.py',48),
  ('fun_def -> FN ident OPEN_PARANTHESIS arguments CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','fun_def',8,'p_fun_def','irgen.py',52),
  ('fun_def -> FN ident OPEN_PARANTHESIS CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','fun_def',7,'p_fun_def','irgen.py',53),
  ('fun_def -> fun_def FN ident OPEN_PARANTHESIS arguments CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','fun_def',9,'p_fun_def','irgen.py',54),
  ('fun_def -> fun_def FN ident OPEN_PARANTHESIS CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','fun_def',8,'p_fun_def','irgen.py',55),
  ('stmts -> non_block_stmt','stmts',1,'p_stmts','irgen.py',59),
  ('stmts -> non_block_stmt stmts','stmts',2,'p_stmts','irgen.py',60),
  ('stmts -> block_stmt','stmts',1,'p_stmts','irgen.py',61),
  ('stmts -> block_stmt stmts','stmts',2,'p_stmts','irgen.py',62),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP SENTENCE SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',67),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP LIT_INTEGER SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',68),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP LIT_FLOAT SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',69),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP MINUS LIT_INTEGER SEMICOLON','non_block_stmt',6,'p_non_block_stmt','irgen.py',70),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP TRUE SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',71),
  ('non_block_stmt -> LET ident ASSIGNMENT_OP FALSE SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',72),
  ('non_block_stmt -> LET MUT ident ASSIGNMENT_OP LIT_INTEGER SEMICOLON','non_block_stmt',6,'p_non_block_stmt','irgen.py',73),
  ('non_block_stmt -> LET MUT ident ASSIGNMENT_OP LIT_FLOAT SEMICOLON','non_block_stmt',6,'p_non_block_stmt','irgen.py',74),
  ('non_block_stmt -> LET MUT ident ASSIGNMENT_OP TRUE SEMICOLON','non_block_stmt',6,'p_non_block_stmt','irgen.py',75),
  ('non_block_stmt -> LET MUT ident ASSIGNMENT_OP FALSE SEMICOLON','non_block_stmt',6,'p_non_block_stmt','irgen.py',76),
  ('non_block_stmt -> PRINT OPEN_PARANTHESIS SENTENCE CLOSE_PARANTHESIS SEMICOLON','non_block_stmt',5,'p_non_block_stmt','irgen.py',77),
  ('non_block_stmt -> binop','non_block_stmt',1,'p_non_block_stmt','irgen.py',78),
  ('non_block_stmt -> bitop','non_block_stmt',1,'p_non_block_stmt','irgen.py',79),
  ('non_block_stmt -> fn_call','non_block_stmt',1,'p_non_block_stmt','irgen.py',80),
  ('non_block_stmt -> print_ident','non_block_stmt',1,'p_non_block_stmt','irgen.py',81),
  ('print_ident -> PRINT ident SEMICOLON','print_ident',3,'p_print_ident','irgen.py',110),
  ('binop -> ident ASSIGNMENT_OP expr SEMICOLON','binop',4,'p_binop','irgen.py',116),
  ('expr -> ident','expr',1,'p_expr','irgen.py',123),
  ('expr -> expr arith_op ident','expr',3,'p_expr','irgen.py',124),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','irgen.py',141),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','irgen.py',142),
  ('arith_op -> MULTIPLICATION','arith_op',1,'p_arith_op','irgen.py',143),
  ('arith_op -> DIVISION','arith_op',1,'p_arith_op','irgen.py',144),
  ('arith_op -> MODULUS','arith_op',1,'p_arith_op','irgen.py',145),
  ('bitop -> ident ASSIGNMENT_OP b_expr SEMICOLON','bitop',4,'p_bitop','irgen.py',151),
  ('b_expr -> ident','b_expr',1,'p_b_expr','irgen.py',158),
  ('b_expr -> b_expr bit_op ident','b_expr',3,'p_b_expr','irgen.py',159),
  ('bit_op -> AND_LOGICAL','bit_op',1,'p_bit_op','irgen.py',175),
  ('bit_op -> OR_LOGICAL','bit_op',1,'p_bit_op','irgen.py',176),
  ('bit_op -> XOR_OP','bit_op',1,'p_bit_op','irgen.py',177),
  ('bit_op -> NOT_OP','bit_op',1,'p_bit_op','irgen.py',178),
  ('bit_op -> LEFT_SHIFT','bit_op',1,'p_bit_op','irgen.py',179),
  ('bit_op -> RIGHT_SHIFT','bit_op',1,'p_bit_op','irgen.py',180),
  ('fn_call -> ident OPEN_PARANTHESIS arguments CLOSE_PARANTHESIS SEMICOLON','fn_call',5,'p_fn_call','irgen.py',186),
  ('fn_call -> ident OPEN_PARANTHESIS CLOSE_PARANTHESIS SEMICOLON','fn_call',4,'p_fn_call','irgen.py',187),
  ('arguments -> ident','arguments',1,'p_arguments','irgen.py',192),
  ('arguments -> ident COMMA arguments','arguments',3,'p_arguments','irgen.py',193),
  ('block_stmt -> loop_block','block_stmt',1,'p_block_stmt','irgen.py',199),
  ('block_stmt -> while_block','block_stmt',1,'p_block_stmt','irgen.py',200),
  ('block_stmt -> for_block','block_stmt',1,'p_block_stmt','irgen.py',201),
  ('block_stmt -> if_block','block_stmt',1,'p_block_stmt','irgen.py',202),
  ('block_stmt -> if_else_block','block_stmt',1,'p_block_stmt','irgen.py',203),
  ('block_stmt -> else_if_block','block_stmt',1,'p_block_stmt','irgen.py',204),
  ('block_stmt -> unsafe_block','block_stmt',1,'p_block_stmt','irgen.py',205),
  ('block_stmt -> match_block','block_stmt',1,'p_block_stmt','irgen.py',206),
  ('block_stmt -> struct_block','block_stmt',1,'p_block_stmt','irgen.py',207),
  ('loop_block -> LOOP BEGIN_BLOCK stmts END_BLOCK','loop_block',4,'p_loop_block','irgen.py',211),
  ('while_block -> WHILE TRUE BEGIN_BLOCK stmts END_BLOCK','while_block',5,'p_while_block','irgen.py',215),
  ('while_block -> WHILE FALSE BEGIN_BLOCK stmts END_BLOCK','while_block',5,'p_while_block','irgen.py',216),
  ('while_block -> WHILE ident BEGIN_BLOCK stmts END_BLOCK','while_block',5,'p_while_block','irgen.py',217),
  ('while_block -> WHILE ident EQUALS_COMP LIT_INTEGER BEGIN_BLOCK stmts END_BLOCK','while_block',7,'p_while_block','irgen.py',218),
  ('while_block -> WHILE ident EQUALS_COMP LIT_FLOAT BEGIN_BLOCK stmts END_BLOCK','while_block',7,'p_while_block','irgen.py',219),
  ('for_block -> FOR ident IN LIT_INTEGER D_DOT LIT_INTEGER BEGIN_BLOCK stmts END_BLOCK','for_block',9,'p_for_block','irgen.py',223),
  ('if_block -> IF OPEN_PARANTHESIS ident operator LIT_INTEGER CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','if_block',9,'p_if_block','irgen.py',227),
  ('if_block -> IF OPEN_PARANTHESIS ident operator EQUALS_COMP LIT_FLOAT CLOSE_PARANTHESIS BEGIN_BLOCK stmts END_BLOCK','if_block',10,'p_if_block','irgen.py',228),
  ('operator -> EQUALS_COMP','operator',1,'p_operator','irgen.py',232),
  ('operator -> GREATER_EQUAL_OP','operator',1,'p_operator','irgen.py',233),
  ('operator -> LESS_EQUAL_OP','operator',1,'p_operator','irgen.py',234),
  ('operator -> LESS_THAN','operator',1,'p_operator','irgen.py',235),
  ('operator -> GREATER_THAN','operator',1,'p_operator','irgen.py',236),
  ('operator -> LESSEQUAL','operator',1,'p_operator','irgen.py',237),
  ('operator -> NOTEQUAL','operator',1,'p_operator','irgen.py',238),
  ('operator -> OR_OP','operator',1,'p_operator','irgen.py',239),
  ('operator -> AND_OP','operator',1,'p_operator','irgen.py',240),
  ('if_else_block -> if_block ELSE BEGIN_BLOCK stmts END_BLOCK','if_else_block',5,'p_if_else_block','irgen.py',244),
  ('else_if_block -> if_block ELSE if_block ELSE BEGIN_BLOCK stmts END_BLOCK','else_if_block',7,'p_else_if_block','irgen.py',248),
  ('unsafe_block -> UNSAFE BEGIN_BLOCK stmts END_BLOCK','unsafe_block',4,'p_unsafe_block','irgen.py',252),
  ('match_block -> MATCH ident BEGIN_BLOCK match_stmt END_BLOCK','match_block',5,'p_match_block','irgen.py',256),
  ('match_stmt -> non_block_stmt mat non_block_stmt','match_stmt',3,'p_match_stmt','irgen.py',260),
  ('match_stmt -> LIT_INTEGER mat non_block_stmt','match_stmt',3,'p_match_stmt','irgen.py',261),
  ('struct_block -> STRUCT ident BEGIN_BLOCK struct_stmt END_BLOCK','struct_block',5,'p_struct_block','irgen.py',265),
  ('struct_stmt -> ident COLON i32','struct_stmt',3,'p_struct_stmt','irgen.py',269),
]
